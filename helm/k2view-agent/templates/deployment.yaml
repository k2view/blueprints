
{{- $namespace := default dict .Values.namespace }}
{{- $namespace_name := default .Release.Name $namespace.name }}
{{- $container := default dict .Values.container }}
{{- $image := default dict .Values.image }}
{{- $image := $image | default $container.image }} {{- /* Support for backward compatibility (image moved to container) */ -}}
{{- $repoSecret := default dict $image.repoSecret }}
{{- $repoSecret := $repoSecret | default $container.image.repoSecret }} {{- /* Support for backward compatibility (image moved to container) */ -}}
{{- $affinity := default dict $container.affinity }}
{{- $serviceAccount := default dict .Values.serviceAccount }}
{{- $resources := default dict $container.resources }}
{{- $limits := default dict $resources.limits }}
{{- $requests := default dict $resources.requests }}
{{- $customCACerts := default dict .Values.customCACerts }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ $namespace_name }}
  labels:
    app: k2view-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k2view-agent
  template:
    metadata:
      labels:
        app: k2view-agent
    spec:
      {{- if $image.addDockerRegistry | default false }}
      imagePullSecrets:
        -name: {{ $image.dockerRegistrySecret }}
      {{- end }}
      {{- if $serviceAccount.attach | default false }}
      serviceAccountName: {{ $serviceAccount.name }}
      {{- end }}
      {{- if or (eq $affinity.type "affinity") (eq $affinity.type "anti-affinity") }}
        affinity:
          {{- if eq $affinity.type "affinity" }}
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: {{ $affinity.label.name }}
                  operator: In
                  values:
                  - {{ $affinity.label.value }}
          {{- else if eq $affinity.type "anti-affinity" }}
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: {{ $affinity.label.name }}
                  operator: NotIn
                  values:
                  - {{ $affinity.label.value }}
          {{- end }}
      {{- end }}
      {{- if $container.securityContext | default false }}
      securityContext:
        fsGroup: 1000
      {{- end }}
      {{- if $customCACerts }}
      initContainers:
        - name: init-k2view-agent
          image: {{ $image.url }}
          imagePullPolicy: {{ $image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command:
            - /bin/bash
            - -l
            - -c
            - update-ca-trust export && cp /etc/pki/ca-trust/extracted/java/cacerts /custom-cacerts/
          volumeMounts:
            - name: custom-ca-certs
              mountPath: /etc/pki/ca-trust/source/anchors
              readOnly: true
            - name: system-cacerts
              mountPath: /custom-cacerts
      {{- end }}
      containers:
        - name: k2view-agent
          image: {{ $image.url }}
          imagePullPolicy: {{ $image.pullPolicy | default "IfNotPresent" }}
          command: [ "K2v-Agent" ]
          args:
            {{- if $customCACerts }}
            - "-Djavax.net.ssl.trustStore=/etc/pki/ca-trust/extracted/java/cacerts"
            {{- end }}
          {{- if $container.securityContext | default false }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
          {{- end }}
          env:
            {{- range $key, $value :=  .Values.secrets }}
            {{- if not (empty $value) }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: agent-config-secrets
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- range $key, $value :=  .Values.secrets_from_file }}
            {{- if not (empty $value) }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: agent-config-secrets
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- range .Values.externalSecrets }}
            - name: {{ .varName }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .key }}
            {{- end }}
            {{- if $serviceAccount.create }}
            - name: kubeToken
              valueFrom:
                secretKeyRef:
                  name: {{ $namespace_name }}-secret
                  key: token
            {{- end }}
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - ps aux | grep K2v-Agent | grep -v grep
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              memory: {{ default "256Mi" $limits.memory }}
              cpu: {{ default "0.4" $limits.cpu }}
            requests:
              memory: {{ default "128Mi" $requests.memory }}
              cpu: {{ default "0.1" $requests.cpu }}
          {{- if $customCACerts }}
          volumeMounts:
            - name: system-cacerts
              mountPath: /etc/pki/ca-trust/extracted/java/cacerts
              subPath: cacerts
              readOnly: true
          {{- end }}
      {{- if $customCACerts }}
      volumes:
        - name: custom-ca-certs
          secret:
            secretName: custom-ca-certs
        - name: system-cacerts
          emptyDir: {}
      {{- end }}
