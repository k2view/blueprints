{{ if eq .Values.deploy.type "Deployment" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fabric-deployment
  namespace: {{ .Values.namespace.name }}
  labels: &id001
    app: fabric
    {{- range $label := .Values.labels }}
    {{ $label.name }}: {{ $label.value }}
    {{- end }}
spec:
    replicas: {{ .Values.container.replicas }}
    selector:
      matchLabels:
        app: fabric
    template:
        metadata:
          labels: *id001
        spec:
          {{- if .Values.container.image.repoSecret.enabled }}
          imagePullSecrets:
            - name: {{ .Values.container.image.repoSecret.name }}
          {{- end }}
          {{- if ne .Values.serviceAccount.name "" }}
          serviceAccountName: {{ .Values.serviceAccount.name }}
          {{- else if .Values.serviceAccount.create }}
          serviceAccountName: {{ .Values.namespace.name }}-sa
          {{- end }}
          {{- if or (eq .Values.affinity.type "affinity") (eq .Values.affinity.type "anti-affinity") }}
          affinity:
            {{- if eq .Values.affinity.type "affinity" }}
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: {{ .Values.affinity.label.name }}
                    operator: In
                    values:
                    - {{ .Values.affinity.label.value }}
            {{- else if eq .Values.affinity.type "anti-affinity" }}
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: {{ .Values.affinity.label.name }}
                    operator: NotIn
                    values:
                    - {{ .Values.affinity.label.value }}
            {{- end }}
          {{- end }}
          initContainers:
          - command:
            - /bin/bash
            args:
            - -l
            - -c
            - ./docker-entrypoint.sh
            imagePullPolicy: IfNotPresent
            image: {{ .Values.container.image.url }}
            name: init-fabric
            resources:
              limits:
                memory: {{ .Values.container.resource_allocation.limits.memory | default "4Gi" }}
                cpu: {{ .Values.container.resource_allocation.limits.cpu | default "1" }}
              requests:
                memory: {{ .Values.container.resource_allocation.requests.memory | default "1Gi" }}
                cpu: {{ .Values.container.resource_allocation.requests.cpu | default "0.4" }}
            env:
            # common secrets
            {{- range $secret := .Values.secretsList }}
            {{- range $key, $value := $secret.data }}
            {{- if not (empty $value) }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            # init secrets
            {{- range $secret := .Values.initSecretsList }}
            {{- range $key, $value := $secret.data }}
            {{- if not (empty $value) }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            volumeMounts:
            - name: fabric-storage
              mountPath: /opt/apps/fabric/workspace
            - name: {{ .Values.mountSecret.name }}
              mountPath: {{ .Values.mountSecret.mountPath }}
          containers:
          - command:
            - /bin/bash
            args:
            - -l
            - -c
            - ./docker-entrypoint.sh && tail -F workspace/logs/k2fabric.log
            imagePullPolicy: IfNotPresent
            image: {{ .Values.container.image.url }}
            name: fabric
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/bash", "-l", "-c", "timeout 120 k2fabric stop || echo 'k2fabric stop timed out'"]
            ports:
            - containerPort: 3213
            - containerPort: 7170
            - containerPort: 7070
            - containerPort: 9100
            securityContext:
              allowPrivilegeEscalation: false
            resources:
              limits:
                memory: {{ .Values.container.resource_allocation.limits.memory | default "4Gi" }}
                cpu: {{ .Values.container.resource_allocation.limits.cpu | default "1" }}
              requests:
                memory: {{ .Values.container.resource_allocation.requests.memory | default "2Gi" }}
                cpu: {{ .Values.container.resource_allocation.requests.cpu | default "0.4" }}
            env:
            {{- range $secret := .Values.secretsList }}
            {{- range $key, $value := $secret.data }}
            {{- if not (empty $value) }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            livenessProbe:
              initialDelaySeconds: {{ .Values.container.livenessProbe.initialDelaySeconds | default 120 }}
              periodSeconds: {{ .Values.container.livenessProbe.periodSeconds | default 60 }}
              exec:
                command:
                - /bin/bash
                - /opt/apps/fabric/isAlive.sh
            volumeMounts:
            - name: fabric-storage
              mountPath: /opt/apps/fabric/workspace
            - name: fabric-storage-private
              mountPath: /opt/apps/fabric/temp
            {{- if .Values.mountSecret.enabled }}
            - name: {{ .Values.mountSecret.name }}
              mountPath: {{ .Values.mountSecret.mountPath }}
            {{- end }}
          terminationGracePeriodSeconds: 150
          {{ if .Values.storage.securityContext }}
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          {{ end }}
          volumes:
          - name: fabric-storage
            persistentVolumeClaim:
              claimName: fabric-claim
          - name: fabric-storage-private
            emptyDir:
              sizeLimit: 10Gi
          - name: {{ .Values.mountSecret.name }}
            secret:
              secretName: {{ .Values.mountSecret.name }}
{{ end }}
