{{ $namespace := default dict .Values.namespace }}
{{ $affinity := default dict .Values.affinity -}}
{{ $repoSecret := default dict .Values.container.image.repoSecret -}}
{{ $resource_allocation := default dict .Values.container.resource_allocation}}
{{ $limits := default dict $resource_allocation.limits}}
{{ $requests := default dict $resource_allocation.requests}}
{{ $app_name := .Values.app_name | default .Chart.Name }}
{{ $service_port := .Values.service.port }}
{{ $secrets := .Values.secrets | default (list) }}
{{ $storage_path := .Values.container.storage_path }}
{{- /* Default values for common apps */ -}}
{{- if $app_name | eq "postgres" }}
  {{ $storage_path := .Values.container.storage_path | default "/opt/apps/pgsql/data/data/" }}
  {{ $service_port := .Values.service.port | default 5432 }}
  {{ $secrets := .Values.secrets | default (list (dict "key" "PGDATA" "value" "/opt/apps/pgsql/data/data/pgdata") (dict "key" "POSTGRES_PASSWORD" "value" "postgres") (dict "key" "POSTGRES_USERNAME" "value" "postgres")) }}
{{- else if $app_name | eq "cassandra" }}
  {{ $storage_path := .Values.container.storage_path | default "/var/lib/cassandra" }}
  {{ $service_port := .Values.service.port | default 9042 }}
  {{ $secrets := .Values.secrets | default (list (dict "key" "HEAP_NEWSIZE" "value" "128M") (dict "key" "MAX_HEAP_SIZE" "value" "2G") (dict "key" "CASSANDRA_DC" "value" "DC1") (dict "key" "CASSANDRA_ENDPOINT_SNITCH" "value" "GossipingPropertyFileSnitch")) }}
{{- else if $app_name | eq "kafka" }}
  {{ $storage_path := .Values.container.storage_path | default "/home/kafka/zk_data" }}
  {{ $service_port := .Values.service.port | default 9093 }}
  {{ $secrets := .Values.secrets | default (list (dict "key" "DATA" "value" "/home/kafka/zk_data")) }}
{{- else if $app_name | eq "neo4j" }}
  {{ $storage_path := .Values.container.storage_path | default "/var/lib/neo4j/data" }}
  {{ $service_port := .Values.service.port | default 7687 }}
  {{ $secrets := .Values.secrets | default (list (dict "key" "NEO4J_PLUGINS" "value" "[\"graph-data-science\", \"apoc\"]") (dict "key" "NEO4J_server_config_strict__validation_enabled" "value" "false") (dict "key" "NEO4J_AUTH" "value" "neo4j/changeit") (dict "key" "NEO4J_ACCEPT_LICENSE_AGREEMENT" "value" "yes")) }}
{{- end }}
{{- /* ---------------------------- */ -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $app_name }}-deployment
  namespace: {{ default .Release.Name $namespace.name }}
  labels: &id001
    app: {{ $app_name }}
    {{- range $label := .Values.labels }}
    {{ $label.name }}: {{ $label.value }}
    {{- end }}
spec:
  replicas: {{ .Values.container.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ $app_name }}
  template:
    metadata:
      labels: *id001
    spec:
      {{- if $repoSecret.enabled }}
      imagePullSecrets:
        - name: {{ $repoSecret.name }}
      {{- end }}
      {{- if or (eq $affinity.type "affinity") (eq $affinity.type "anti-affinity") }}
      affinity:
        {{- if eq $affinity.type "affinity" }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ $affinity.label.name }}
                operator: In
                values:
                - {{ $affinity.label.value }}
        {{- else if eq $affinity.type "anti-affinity" }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ $affinity.label.name }}
                operator: NotIn
                values:
                - {{ $affinity.label.value }}
        {{- end }}
      {{- end }}
      containers:
      - name: {{ $app_name }}
        image: {{ .Values.container.image.url }}
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: {{ $service_port }}
        resources:
          limits:
            memory: {{ $limits.memory | default "4Gi" }}
            cpu: {{ $limits.cpu | default "1" }}
          requests:
            memory: {{ $requests.memory | default "4Gi" }}
            cpu: {{ $requests.cpu | default "1" }}
        env:
        {{- range $secrets }}
        - name: {{ .key }}
          valueFrom:
            secretKeyRef:
              name: {{ $app_name }}-secrets
              key: {{ .key }}
        {{- end }}
        volumeMounts:
        - name: {{ $app_name }}-storage
          mountPath: {{ $storage_path }}
      volumes:
      - name: {{ $app_name }}-storage
        persistentVolumeClaim:
          claimName: {{ $app_name }}-claim
